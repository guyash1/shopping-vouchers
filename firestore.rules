rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // בדיקת מנהל
    function isAuthenticated() {
      return request.auth != null;
    }

    // בדיקה אם משתמש שייך למשק בית
    function isMemberOfHousehold(householdId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/households/$(householdId)/members/$(request.auth.uid));
    }
    
    // בדיקה אם המסמך שייך למשתמש הנוכחי
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // חוקים עבור משק בית
    match /households/{householdId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || isMemberOfHousehold(householdId));
      allow update: if isAuthenticated() && isOwner(resource.data.ownerId);
      allow delete: if isAuthenticated() && isOwner(resource.data.ownerId);
      
      // חוקים עבור חברי משק בית
      match /members/{memberId} {
        allow read: if isAuthenticated() && (isOwner(memberId) || isMemberOfHousehold(householdId));
        allow write: if isAuthenticated() && isOwner(resource.data.ownerId);
      }
    }
    
    // חוקים עבור פריטים (רשימת קניות)
    match /items/{itemId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.addedBy) || 
        (resource.data.householdId != null && isMemberOfHousehold(resource.data.householdId))
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.addedBy) || 
        (request.resource.data.householdId != null && isMemberOfHousehold(request.resource.data.householdId))
      );
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.addedBy) || 
        (resource.data.householdId != null && isMemberOfHousehold(resource.data.householdId))
      );
    }
    
    // חוקים עבור שוברים
    match /vouchers/{voucherId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (resource.data.householdId != null && isMemberOfHousehold(resource.data.householdId))
      );
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // חוקים עבור משתמשים
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
} 